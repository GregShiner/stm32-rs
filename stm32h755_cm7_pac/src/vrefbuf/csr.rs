#[doc = "Register `CSR` reader"]
pub type R = crate::R<CsrSpec>;
#[doc = "Register `CSR` writer"]
pub type W = crate::W<CsrSpec>;
#[doc = "Field `ENVR` reader - Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode."]
pub type EnvrR = crate::BitReader;
#[doc = "Field `ENVR` writer - Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode."]
pub type EnvrW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `HIZ` reader - High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to Table196: VREF buffer modes for the mode descriptions depending on ENVR bit configuration."]
pub type HizR = crate::BitReader;
#[doc = "Field `HIZ` writer - High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to Table196: VREF buffer modes for the mode descriptions depending on ENVR bit configuration."]
pub type HizW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `VRR` reader - Voltage reference buffer ready"]
pub type VrrR = crate::BitReader;
#[doc = "Field `VRS` reader - Voltage reference scale These bits select the value generated by the voltage reference buffer. Other: Reserved"]
pub type VrsR = crate::FieldReader;
#[doc = "Field `VRS` writer - Voltage reference scale These bits select the value generated by the voltage reference buffer. Other: Reserved"]
pub type VrsW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
impl R {
    #[doc = "Bit 0 - Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode."]
    #[inline(always)]
    pub fn envr(&self) -> EnvrR {
        EnvrR::new((self.bits & 1) != 0)
    }
    #[doc = "Bit 1 - High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to Table196: VREF buffer modes for the mode descriptions depending on ENVR bit configuration."]
    #[inline(always)]
    pub fn hiz(&self) -> HizR {
        HizR::new(((self.bits >> 1) & 1) != 0)
    }
    #[doc = "Bit 3 - Voltage reference buffer ready"]
    #[inline(always)]
    pub fn vrr(&self) -> VrrR {
        VrrR::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bits 4:6 - Voltage reference scale These bits select the value generated by the voltage reference buffer. Other: Reserved"]
    #[inline(always)]
    pub fn vrs(&self) -> VrsR {
        VrsR::new(((self.bits >> 4) & 7) as u8)
    }
}
impl W {
    #[doc = "Bit 0 - Voltage reference buffer mode enable This bit is used to enable the voltage reference buffer mode."]
    #[inline(always)]
    pub fn envr(&mut self) -> EnvrW<CsrSpec> {
        EnvrW::new(self, 0)
    }
    #[doc = "Bit 1 - High impedance mode This bit controls the analog switch to connect or not the VREF+ pin. Refer to Table196: VREF buffer modes for the mode descriptions depending on ENVR bit configuration."]
    #[inline(always)]
    pub fn hiz(&mut self) -> HizW<CsrSpec> {
        HizW::new(self, 1)
    }
    #[doc = "Bits 4:6 - Voltage reference scale These bits select the value generated by the voltage reference buffer. Other: Reserved"]
    #[inline(always)]
    pub fn vrs(&mut self) -> VrsW<CsrSpec> {
        VrsW::new(self, 4)
    }
}
#[doc = "VREFBUF control and status register\n\nYou can [`read`](crate::Reg::read) this register and get [`csr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`csr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct CsrSpec;
impl crate::RegisterSpec for CsrSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`csr::R`](R) reader structure"]
impl crate::Readable for CsrSpec {}
#[doc = "`write(|w| ..)` method takes [`csr::W`](W) writer structure"]
impl crate::Writable for CsrSpec {
    type Safety = crate::Unsafe;
}
#[doc = "`reset()` method sets CSR to value 0x02"]
impl crate::Resettable for CsrSpec {
    const RESET_VALUE: u32 = 0x02;
}
