#![doc = "Peripheral access API for STM32H755_CM7 microcontrollers (generated using svd2rust v0.36.1 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 4;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG1();
    fn PVD_PVM();
    fn RTC_TAMP_STAMP_CSS_LSE();
    fn RTC_WKUP();
    fn FLASH();
    fn RCC();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn DMA_STR0();
    fn DMA_STR1();
    fn DMA_STR2();
    fn DMA_STR3();
    fn DMA_STR4();
    fn DMA_STR5();
    fn DMA_STR6();
    fn ADC1_2();
    fn FDCAN1_IT0();
    fn FDCAN2_IT0();
    fn FDCAN1_IT1();
    fn FDCAN2_IT1();
    fn EXTI9_5();
    fn TIM1_BRK();
    fn TIM1_UP();
    fn TIM1_TRG_COM();
    fn TIM_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3();
    fn EXTI15_10();
    fn RTC_ALARM();
    fn TIM8_BRK_TIM12();
    fn TIM8_UP_TIM13();
    fn TIM8_TRG_COM_TIM14();
    fn TIM8_CC();
    fn DMA1_STR7();
    fn FMC();
    fn SDMMC1();
    fn TIM5();
    fn SPI3();
    fn UART4();
    fn UART5();
    fn TIM6_DAC();
    fn TIM7();
    fn DMA2_STR0();
    fn DMA2_STR1();
    fn DMA2_STR2();
    fn DMA2_STR3();
    fn DMA2_STR4();
    fn ETH();
    fn ETH_WKUP();
    fn FDCAN_CAL();
    fn cm4_sev_it();
    fn DMA2_STR5();
    fn DMA2_STR6();
    fn DMA2_STR7();
    fn USART6();
    fn I2C3_EV();
    fn I2C3_ER();
    fn OTG_HS_EP1_OUT();
    fn OTG_HS_EP1_IN();
    fn OTG_HS_WKUP();
    fn OTG_HS();
    fn DCMI();
    fn CRYP();
    fn HASH_RNG();
    fn FPU();
    fn UART7();
    fn UART8();
    fn SPI4();
    fn SPI5();
    fn SPI6();
    fn SAI1();
    fn LTDC();
    fn LTDC_ER();
    fn DMA2D();
    fn SAI2();
    fn QUADSPI();
    fn LPTIM1();
    fn CEC();
    fn I2C4_EV();
    fn I2C4_ER();
    fn SPDIF();
    fn OTG_FS_EP1_OUT();
    fn OTG_FS_EP1_IN();
    fn OTG_FS_WKUP();
    fn OTG_FS();
    fn DMAMUX1_OV();
    fn HRTIM1_MST();
    fn HRTIM1_TIMA();
    fn HRTIM_TIMB();
    fn HRTIM1_TIMC();
    fn HRTIM1_TIMD();
    fn HRTIM_TIME();
    fn HRTIM1_FLT();
    fn DFSDM1_FLT0();
    fn DFSDM1_FLT1();
    fn DFSDM1_FLT2();
    fn DFSDM1_FLT3();
    fn SAI3();
    fn SWPMI1();
    fn TIM15();
    fn TIM16();
    fn TIM17();
    fn MDIOS_WKUP();
    fn MDIOS();
    fn JPEG();
    fn MDMA();
    fn SDMMC();
    fn HSEM0();
    fn ADC3();
    fn DMAMUX2_OVR();
    fn BDMA_CH1();
    fn BDMA_CH2();
    fn BDMA_CH3();
    fn BDMA_CH4();
    fn BDMA_CH5();
    fn BDMA_CH6();
    fn BDMA_CH7();
    fn BDMA_CH8();
    fn COMP();
    fn LPTIM2();
    fn LPTIM3();
    fn LPTIM4();
    fn LPTIM5();
    fn LPUART();
    fn WWDG2_RST();
    fn CRS();
    fn SAI4();
    fn HOLD_CORE();
    fn WKUP();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 150] = [
    Vector { _handler: WWDG1 },
    Vector { _handler: PVD_PVM },
    Vector {
        _handler: RTC_TAMP_STAMP_CSS_LSE,
    },
    Vector { _handler: RTC_WKUP },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: DMA_STR0 },
    Vector { _handler: DMA_STR1 },
    Vector { _handler: DMA_STR2 },
    Vector { _handler: DMA_STR3 },
    Vector { _handler: DMA_STR4 },
    Vector { _handler: DMA_STR5 },
    Vector { _handler: DMA_STR6 },
    Vector { _handler: ADC1_2 },
    Vector {
        _handler: FDCAN1_IT0,
    },
    Vector {
        _handler: FDCAN2_IT0,
    },
    Vector {
        _handler: FDCAN1_IT1,
    },
    Vector {
        _handler: FDCAN2_IT1,
    },
    Vector { _handler: EXTI9_5 },
    Vector { _handler: TIM1_BRK },
    Vector { _handler: TIM1_UP },
    Vector {
        _handler: TIM1_TRG_COM,
    },
    Vector { _handler: TIM_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector {
        _handler: EXTI15_10,
    },
    Vector {
        _handler: RTC_ALARM,
    },
    Vector { _reserved: 0 },
    Vector {
        _handler: TIM8_BRK_TIM12,
    },
    Vector {
        _handler: TIM8_UP_TIM13,
    },
    Vector {
        _handler: TIM8_TRG_COM_TIM14,
    },
    Vector { _handler: TIM8_CC },
    Vector {
        _handler: DMA1_STR7,
    },
    Vector { _handler: FMC },
    Vector { _handler: SDMMC1 },
    Vector { _handler: TIM5 },
    Vector { _handler: SPI3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector { _handler: TIM6_DAC },
    Vector { _handler: TIM7 },
    Vector {
        _handler: DMA2_STR0,
    },
    Vector {
        _handler: DMA2_STR1,
    },
    Vector {
        _handler: DMA2_STR2,
    },
    Vector {
        _handler: DMA2_STR3,
    },
    Vector {
        _handler: DMA2_STR4,
    },
    Vector { _handler: ETH },
    Vector { _handler: ETH_WKUP },
    Vector {
        _handler: FDCAN_CAL,
    },
    Vector { _reserved: 0 },
    Vector {
        _handler: cm4_sev_it,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: DMA2_STR5,
    },
    Vector {
        _handler: DMA2_STR6,
    },
    Vector {
        _handler: DMA2_STR7,
    },
    Vector { _handler: USART6 },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector {
        _handler: OTG_HS_EP1_OUT,
    },
    Vector {
        _handler: OTG_HS_EP1_IN,
    },
    Vector {
        _handler: OTG_HS_WKUP,
    },
    Vector { _handler: OTG_HS },
    Vector { _handler: DCMI },
    Vector { _handler: CRYP },
    Vector { _handler: HASH_RNG },
    Vector { _handler: FPU },
    Vector { _handler: UART7 },
    Vector { _handler: UART8 },
    Vector { _handler: SPI4 },
    Vector { _handler: SPI5 },
    Vector { _handler: SPI6 },
    Vector { _handler: SAI1 },
    Vector { _handler: LTDC },
    Vector { _handler: LTDC_ER },
    Vector { _handler: DMA2D },
    Vector { _handler: SAI2 },
    Vector { _handler: QUADSPI },
    Vector { _handler: LPTIM1 },
    Vector { _handler: CEC },
    Vector { _handler: I2C4_EV },
    Vector { _handler: I2C4_ER },
    Vector { _handler: SPDIF },
    Vector {
        _handler: OTG_FS_EP1_OUT,
    },
    Vector {
        _handler: OTG_FS_EP1_IN,
    },
    Vector {
        _handler: OTG_FS_WKUP,
    },
    Vector { _handler: OTG_FS },
    Vector {
        _handler: DMAMUX1_OV,
    },
    Vector {
        _handler: HRTIM1_MST,
    },
    Vector {
        _handler: HRTIM1_TIMA,
    },
    Vector {
        _handler: HRTIM_TIMB,
    },
    Vector {
        _handler: HRTIM1_TIMC,
    },
    Vector {
        _handler: HRTIM1_TIMD,
    },
    Vector {
        _handler: HRTIM_TIME,
    },
    Vector {
        _handler: HRTIM1_FLT,
    },
    Vector {
        _handler: DFSDM1_FLT0,
    },
    Vector {
        _handler: DFSDM1_FLT1,
    },
    Vector {
        _handler: DFSDM1_FLT2,
    },
    Vector {
        _handler: DFSDM1_FLT3,
    },
    Vector { _handler: SAI3 },
    Vector { _handler: SWPMI1 },
    Vector { _handler: TIM15 },
    Vector { _handler: TIM16 },
    Vector { _handler: TIM17 },
    Vector {
        _handler: MDIOS_WKUP,
    },
    Vector { _handler: MDIOS },
    Vector { _handler: JPEG },
    Vector { _handler: MDMA },
    Vector { _reserved: 0 },
    Vector { _handler: SDMMC },
    Vector { _handler: HSEM0 },
    Vector { _reserved: 0 },
    Vector { _handler: ADC3 },
    Vector {
        _handler: DMAMUX2_OVR,
    },
    Vector { _handler: BDMA_CH1 },
    Vector { _handler: BDMA_CH2 },
    Vector { _handler: BDMA_CH3 },
    Vector { _handler: BDMA_CH4 },
    Vector { _handler: BDMA_CH5 },
    Vector { _handler: BDMA_CH6 },
    Vector { _handler: BDMA_CH7 },
    Vector { _handler: BDMA_CH8 },
    Vector { _handler: COMP },
    Vector { _handler: LPTIM2 },
    Vector { _handler: LPTIM3 },
    Vector { _handler: LPTIM4 },
    Vector { _handler: LPTIM5 },
    Vector { _handler: LPUART },
    Vector {
        _handler: WWDG2_RST,
    },
    Vector { _handler: CRS },
    Vector { _reserved: 0 },
    Vector { _handler: SAI4 },
    Vector { _reserved: 0 },
    Vector {
        _handler: HOLD_CORE,
    },
    Vector { _handler: WKUP },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - Window Watchdog interrupt"]
    WWDG1 = 0,
    #[doc = "1 - PVD through EXTI line"]
    PVD_PVM = 1,
    #[doc = "2 - RTC tamper, timestamp"]
    RTC_TAMP_STAMP_CSS_LSE = 2,
    #[doc = "3 - RTC Wakeup interrupt"]
    RTC_WKUP = 3,
    #[doc = "4 - Flash memory"]
    FLASH = 4,
    #[doc = "5 - RCC global interrupt"]
    RCC = 5,
    #[doc = "6 - EXTI Line 0 interrupt"]
    EXTI0 = 6,
    #[doc = "7 - EXTI Line 1 interrupt"]
    EXTI1 = 7,
    #[doc = "8 - EXTI Line 2 interrupt"]
    EXTI2 = 8,
    #[doc = "9 - EXTI Line 3interrupt"]
    EXTI3 = 9,
    #[doc = "10 - EXTI Line 4interrupt"]
    EXTI4 = 10,
    #[doc = "11 - DMA1 Stream0"]
    DMA_STR0 = 11,
    #[doc = "12 - DMA1 Stream1"]
    DMA_STR1 = 12,
    #[doc = "13 - DMA1 Stream2"]
    DMA_STR2 = 13,
    #[doc = "14 - DMA1 Stream3"]
    DMA_STR3 = 14,
    #[doc = "15 - DMA1 Stream4"]
    DMA_STR4 = 15,
    #[doc = "16 - DMA1 Stream5"]
    DMA_STR5 = 16,
    #[doc = "17 - DMA1 Stream6"]
    DMA_STR6 = 17,
    #[doc = "18 - ADC1 and ADC2"]
    ADC1_2 = 18,
    #[doc = "19 - FDCAN1 Interrupt 0"]
    FDCAN1_IT0 = 19,
    #[doc = "20 - FDCAN2 Interrupt 0"]
    FDCAN2_IT0 = 20,
    #[doc = "21 - FDCAN1 Interrupt 1"]
    FDCAN1_IT1 = 21,
    #[doc = "22 - FDCAN2 Interrupt 1"]
    FDCAN2_IT1 = 22,
    #[doc = "23 - EXTI Line\\[9:5\\] interrupts"]
    EXTI9_5 = 23,
    #[doc = "24 - TIM1 break interrupt"]
    TIM1_BRK = 24,
    #[doc = "25 - TIM1 update interrupt"]
    TIM1_UP = 25,
    #[doc = "26 - TIM1 trigger and commutation"]
    TIM1_TRG_COM = 26,
    #[doc = "27 - TIM1 capture / compare"]
    TIM_CC = 27,
    #[doc = "28 - TIM2 global interrupt"]
    TIM2 = 28,
    #[doc = "29 - TIM3 global interrupt"]
    TIM3 = 29,
    #[doc = "30 - TIM4 global interrupt"]
    TIM4 = 30,
    #[doc = "31 - I2C1 event interrupt"]
    I2C1_EV = 31,
    #[doc = "32 - I2C1 error interrupt"]
    I2C1_ER = 32,
    #[doc = "33 - I2C2 event interrupt"]
    I2C2_EV = 33,
    #[doc = "34 - I2C2 error interrupt"]
    I2C2_ER = 34,
    #[doc = "35 - SPI1 global interrupt"]
    SPI1 = 35,
    #[doc = "36 - SPI2 global interrupt"]
    SPI2 = 36,
    #[doc = "37 - USART1 global interrupt"]
    USART1 = 37,
    #[doc = "38 - USART2 global interrupt"]
    USART2 = 38,
    #[doc = "39 - USART3 global interrupt"]
    USART3 = 39,
    #[doc = "40 - EXTI Line\\[15:10\\] interrupts"]
    EXTI15_10 = 40,
    #[doc = "41 - RTC alarms (A and B)"]
    RTC_ALARM = 41,
    #[doc = "43 - TIM8 and 12 break global"]
    TIM8_BRK_TIM12 = 43,
    #[doc = "44 - TIM8 and 13 update global"]
    TIM8_UP_TIM13 = 44,
    #[doc = "45 - TIM8 and 14 trigger /commutation and global"]
    TIM8_TRG_COM_TIM14 = 45,
    #[doc = "46 - TIM8 capture / compare"]
    TIM8_CC = 46,
    #[doc = "47 - DMA1 Stream7"]
    DMA1_STR7 = 47,
    #[doc = "48 - FMC global interrupt"]
    FMC = 48,
    #[doc = "49 - SDMMC global interrupt"]
    SDMMC1 = 49,
    #[doc = "50 - TIM5 global interrupt"]
    TIM5 = 50,
    #[doc = "51 - SPI3 global interrupt"]
    SPI3 = 51,
    #[doc = "52 - UART4 global interrupt"]
    UART4 = 52,
    #[doc = "53 - UART5 global interrupt"]
    UART5 = 53,
    #[doc = "54 - TIM6 global interrupt"]
    TIM6_DAC = 54,
    #[doc = "55 - TIM7 global interrupt"]
    TIM7 = 55,
    #[doc = "56 - DMA2 Stream0 interrupt"]
    DMA2_STR0 = 56,
    #[doc = "57 - DMA2 Stream1 interrupt"]
    DMA2_STR1 = 57,
    #[doc = "58 - DMA2 Stream2 interrupt"]
    DMA2_STR2 = 58,
    #[doc = "59 - DMA2 Stream3 interrupt"]
    DMA2_STR3 = 59,
    #[doc = "60 - DMA2 Stream4 interrupt"]
    DMA2_STR4 = 60,
    #[doc = "61 - Ethernet global interrupt"]
    ETH = 61,
    #[doc = "62 - Ethernet wakeup through EXTI"]
    ETH_WKUP = 62,
    #[doc = "63 - CAN2TX interrupts"]
    FDCAN_CAL = 63,
    #[doc = "65 - Arm Cortex-M4 Send even interrupt"]
    cm4_sev_it = 65,
    #[doc = "68 - DMA2 Stream5 interrupt"]
    DMA2_STR5 = 68,
    #[doc = "69 - DMA2 Stream6 interrupt"]
    DMA2_STR6 = 69,
    #[doc = "70 - DMA2 Stream7 interrupt"]
    DMA2_STR7 = 70,
    #[doc = "71 - USART6 global interrupt"]
    USART6 = 71,
    #[doc = "72 - I2C3 event interrupt"]
    I2C3_EV = 72,
    #[doc = "73 - I2C3 error interrupt"]
    I2C3_ER = 73,
    #[doc = "74 - OTG_HS out global interrupt"]
    OTG_HS_EP1_OUT = 74,
    #[doc = "75 - OTG_HS in global interrupt"]
    OTG_HS_EP1_IN = 75,
    #[doc = "76 - OTG_HS wakeup interrupt"]
    OTG_HS_WKUP = 76,
    #[doc = "77 - OTG_HS global interrupt"]
    OTG_HS = 77,
    #[doc = "78 - DCMI global interrupt"]
    DCMI = 78,
    #[doc = "79 - CRYP global interrupt"]
    CRYP = 79,
    #[doc = "80 - HASH and RNG"]
    HASH_RNG = 80,
    #[doc = "81 - CPU1"]
    FPU = 81,
    #[doc = "82 - UART7 global interrupt"]
    UART7 = 82,
    #[doc = "83 - UART8 global interrupt"]
    UART8 = 83,
    #[doc = "84 - SPI4 global interrupt"]
    SPI4 = 84,
    #[doc = "85 - SPI5 global interrupt"]
    SPI5 = 85,
    #[doc = "86 - SPI6 global interrupt"]
    SPI6 = 86,
    #[doc = "87 - SAI1 global interrupt"]
    SAI1 = 87,
    #[doc = "88 - LCD-TFT global interrupt"]
    LTDC = 88,
    #[doc = "89 - LCD-TFT error interrupt"]
    LTDC_ER = 89,
    #[doc = "90 - DMA2D global interrupt"]
    DMA2D = 90,
    #[doc = "91 - SAI2 global interrupt"]
    SAI2 = 91,
    #[doc = "92 - QuadSPI global interrupt"]
    QUADSPI = 92,
    #[doc = "93 - LPTIM1 global interrupt"]
    LPTIM1 = 93,
    #[doc = "94 - HDMI-CEC global interrupt"]
    CEC = 94,
    #[doc = "95 - I2C4 event interrupt"]
    I2C4_EV = 95,
    #[doc = "96 - I2C4 error interrupt"]
    I2C4_ER = 96,
    #[doc = "97 - SPDIFRX global interrupt"]
    SPDIF = 97,
    #[doc = "98 - OTG_FS out global interrupt"]
    OTG_FS_EP1_OUT = 98,
    #[doc = "99 - OTG_FS in global interrupt"]
    OTG_FS_EP1_IN = 99,
    #[doc = "100 - OTG_FS wakeup"]
    OTG_FS_WKUP = 100,
    #[doc = "101 - OTG_FS global interrupt"]
    OTG_FS = 101,
    #[doc = "102 - DMAMUX1 overrun interrupt"]
    DMAMUX1_OV = 102,
    #[doc = "103 - HRTIM1 master timer interrupt"]
    HRTIM1_MST = 103,
    #[doc = "104 - HRTIM1 timer A interrupt"]
    HRTIM1_TIMA = 104,
    #[doc = "105 - HRTIM1 timer B interrupt"]
    HRTIM_TIMB = 105,
    #[doc = "106 - HRTIM1 timer C interrupt"]
    HRTIM1_TIMC = 106,
    #[doc = "107 - HRTIM1 timer D interrupt"]
    HRTIM1_TIMD = 107,
    #[doc = "108 - HRTIM1 timer E interrupt"]
    HRTIM_TIME = 108,
    #[doc = "109 - HRTIM1 fault interrupt"]
    HRTIM1_FLT = 109,
    #[doc = "110 - DFSDM1 filter 0 interrupt"]
    DFSDM1_FLT0 = 110,
    #[doc = "111 - DFSDM1 filter 1 interrupt"]
    DFSDM1_FLT1 = 111,
    #[doc = "112 - DFSDM1 filter 2 interrupt"]
    DFSDM1_FLT2 = 112,
    #[doc = "113 - DFSDM1 filter 3 interrupt"]
    DFSDM1_FLT3 = 113,
    #[doc = "114 - SAI3 global interrupt"]
    SAI3 = 114,
    #[doc = "115 - SWPMI global interrupt"]
    SWPMI1 = 115,
    #[doc = "116 - TIM15 global interrupt"]
    TIM15 = 116,
    #[doc = "117 - TIM16 global interrupt"]
    TIM16 = 117,
    #[doc = "118 - TIM17 global interrupt"]
    TIM17 = 118,
    #[doc = "119 - MDIOS wakeup"]
    MDIOS_WKUP = 119,
    #[doc = "120 - MDIOS global interrupt"]
    MDIOS = 120,
    #[doc = "121 - JPEG global interrupt"]
    JPEG = 121,
    #[doc = "122 - MDMA"]
    MDMA = 122,
    #[doc = "124 - SDMMC global interrupt"]
    SDMMC = 124,
    #[doc = "125 - HSEM global interrupt 1"]
    HSEM0 = 125,
    #[doc = "127 - ADC3 global interrupt"]
    ADC3 = 127,
    #[doc = "128 - DMAMUX2 overrun interrupt"]
    DMAMUX2_OVR = 128,
    #[doc = "129 - BDMA channel 1 interrupt"]
    BDMA_CH1 = 129,
    #[doc = "130 - BDMA channel 2 interrupt"]
    BDMA_CH2 = 130,
    #[doc = "131 - BDMA channel 3 interrupt"]
    BDMA_CH3 = 131,
    #[doc = "132 - BDMA channel 4 interrupt"]
    BDMA_CH4 = 132,
    #[doc = "133 - BDMA channel 5 interrupt"]
    BDMA_CH5 = 133,
    #[doc = "134 - BDMA channel 6 interrupt"]
    BDMA_CH6 = 134,
    #[doc = "135 - BDMA channel 7 interrupt"]
    BDMA_CH7 = 135,
    #[doc = "136 - BDMA channel 8 interrupt"]
    BDMA_CH8 = 136,
    #[doc = "137 - COMP1 and COMP2"]
    COMP = 137,
    #[doc = "138 - LPTIM2 timer interrupt"]
    LPTIM2 = 138,
    #[doc = "139 - LPTIM2 timer interrupt"]
    LPTIM3 = 139,
    #[doc = "140 - LPTIM2 timer interrupt"]
    LPTIM4 = 140,
    #[doc = "141 - LPTIM2 timer interrupt"]
    LPTIM5 = 141,
    #[doc = "142 - LPUART global interrupt"]
    LPUART = 142,
    #[doc = "143 - Window Watchdog interrupt"]
    WWDG2_RST = 143,
    #[doc = "144 - Clock Recovery System globa"]
    CRS = 144,
    #[doc = "146 - SAI4 global interrupt"]
    SAI4 = 146,
    #[doc = "148 - CPU1 hold"]
    HOLD_CORE = 148,
    #[doc = "149 - WKUP1 to WKUP6 pins"]
    WKUP = 149,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "COMP1"]
pub type Comp1 = crate::Periph<comp1::RegisterBlock, 0x5800_3800>;
impl core::fmt::Debug for Comp1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Comp1").finish()
    }
}
#[doc = "COMP1"]
pub mod comp1;
#[doc = "CRS"]
pub type Crs = crate::Periph<crs::RegisterBlock, 0x4000_8400>;
impl core::fmt::Debug for Crs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crs").finish()
    }
}
#[doc = "CRS"]
pub mod crs;
#[doc = "DAC"]
pub type Dac = crate::Periph<dac::RegisterBlock, 0x4000_7400>;
impl core::fmt::Debug for Dac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac").finish()
    }
}
#[doc = "DAC"]
pub mod dac;
#[doc = "BDMA"]
pub type Bdma = crate::Periph<bdma::RegisterBlock, 0x5802_5400>;
impl core::fmt::Debug for Bdma {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Bdma").finish()
    }
}
#[doc = "BDMA"]
pub mod bdma;
#[doc = "DMA2D"]
pub type Dma2d = crate::Periph<dma2d::RegisterBlock, 0x5200_1000>;
impl core::fmt::Debug for Dma2d {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma2d").finish()
    }
}
#[doc = "DMA2D"]
pub mod dma2d;
#[doc = "DMAMUX"]
pub type Dmamux2 = crate::Periph<dmamux2::RegisterBlock, 0x5802_5800>;
impl core::fmt::Debug for Dmamux2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmamux2").finish()
    }
}
#[doc = "DMAMUX"]
pub mod dmamux2;
#[doc = "FMC"]
pub type Fmc = crate::Periph<fmc::RegisterBlock, 0x5200_4000>;
impl core::fmt::Debug for Fmc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fmc").finish()
    }
}
#[doc = "FMC"]
pub mod fmc;
#[doc = "CEC"]
pub type Cec = crate::Periph<cec::RegisterBlock, 0x4000_6c00>;
impl core::fmt::Debug for Cec {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Cec").finish()
    }
}
#[doc = "CEC"]
pub mod cec;
#[doc = "HSEM"]
pub type Hsem = crate::Periph<hsem::RegisterBlock, 0x5802_6400>;
impl core::fmt::Debug for Hsem {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hsem").finish()
    }
}
#[doc = "HSEM"]
pub mod hsem;
#[doc = "I2C"]
pub type I2c1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1").finish()
    }
}
#[doc = "I2C"]
pub mod i2c1;
#[doc = "I2C"]
pub type I2c2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2c2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c2").finish()
    }
}
#[doc = "I2C"]
pub use self::i2c1 as i2c2;
#[doc = "I2C"]
pub type I2c3 = crate::Periph<i2c1::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for I2c3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c3").finish()
    }
}
#[doc = "I2C"]
pub use self::i2c1 as i2c3;
#[doc = "I2C"]
pub type I2c4 = crate::Periph<i2c1::RegisterBlock, 0x5800_1c00>;
impl core::fmt::Debug for I2c4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c4").finish()
    }
}
#[doc = "I2C"]
pub use self::i2c1 as i2c4;
#[doc = "GPIO"]
pub type Gpioa = crate::Periph<gpioa::RegisterBlock, 0x5802_0000>;
impl core::fmt::Debug for Gpioa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioa").finish()
    }
}
#[doc = "GPIO"]
pub mod gpioa;
#[doc = "GPIO"]
pub type Gpiob = crate::Periph<gpioa::RegisterBlock, 0x5802_0400>;
impl core::fmt::Debug for Gpiob {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiob").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpioa as gpiob;
#[doc = "GPIO"]
pub type Gpioc = crate::Periph<gpioa::RegisterBlock, 0x5802_0800>;
impl core::fmt::Debug for Gpioc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioc").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpioa as gpioc;
#[doc = "GPIO"]
pub type Gpiod = crate::Periph<gpioa::RegisterBlock, 0x5802_0c00>;
impl core::fmt::Debug for Gpiod {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiod").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpioa as gpiod;
#[doc = "GPIO"]
pub type Gpioe = crate::Periph<gpioa::RegisterBlock, 0x5802_1000>;
impl core::fmt::Debug for Gpioe {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioe").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpioa as gpioe;
#[doc = "GPIO"]
pub type Gpiof = crate::Periph<gpioa::RegisterBlock, 0x5802_1400>;
impl core::fmt::Debug for Gpiof {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiof").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpioa as gpiof;
#[doc = "GPIO"]
pub type Gpiog = crate::Periph<gpioa::RegisterBlock, 0x5802_1800>;
impl core::fmt::Debug for Gpiog {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiog").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpioa as gpiog;
#[doc = "GPIO"]
pub type Gpioh = crate::Periph<gpioa::RegisterBlock, 0x5802_1c00>;
impl core::fmt::Debug for Gpioh {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioh").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpioa as gpioh;
#[doc = "GPIO"]
pub type Gpioi = crate::Periph<gpioa::RegisterBlock, 0x5802_2000>;
impl core::fmt::Debug for Gpioi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioi").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpioa as gpioi;
#[doc = "GPIO"]
pub type Gpioj = crate::Periph<gpioa::RegisterBlock, 0x5802_2400>;
impl core::fmt::Debug for Gpioj {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioj").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpioa as gpioj;
#[doc = "GPIO"]
pub type Gpiok = crate::Periph<gpioa::RegisterBlock, 0x5802_2800>;
impl core::fmt::Debug for Gpiok {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiok").finish()
    }
}
#[doc = "GPIO"]
pub use self::gpioa as gpiok;
#[doc = "JPEG"]
pub type Jpeg = crate::Periph<jpeg::RegisterBlock, 0x5200_3000>;
impl core::fmt::Debug for Jpeg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Jpeg").finish()
    }
}
#[doc = "JPEG"]
pub mod jpeg;
#[doc = "MDMA"]
pub type Mdma = crate::Periph<mdma::RegisterBlock, 0x5200_0000>;
impl core::fmt::Debug for Mdma {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Mdma").finish()
    }
}
#[doc = "MDMA"]
pub mod mdma;
#[doc = "QUADSPI"]
pub type Quadspi = crate::Periph<quadspi::RegisterBlock, 0x5200_5000>;
impl core::fmt::Debug for Quadspi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Quadspi").finish()
    }
}
#[doc = "QUADSPI"]
pub mod quadspi;
#[doc = "RNG"]
pub type Rng = crate::Periph<rng::RegisterBlock, 0x4802_1800>;
impl core::fmt::Debug for Rng {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rng").finish()
    }
}
#[doc = "RNG"]
pub mod rng;
#[doc = "RTC"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x5800_4000>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "RTC"]
pub mod rtc;
#[doc = "SAI"]
pub type Sai4 = crate::Periph<sai4::RegisterBlock, 0x5800_5400>;
impl core::fmt::Debug for Sai4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sai4").finish()
    }
}
#[doc = "SAI"]
pub mod sai4;
#[doc = "SAI"]
pub type Sai1 = crate::Periph<sai4::RegisterBlock, 0x4001_5800>;
impl core::fmt::Debug for Sai1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sai1").finish()
    }
}
#[doc = "SAI"]
pub use self::sai4 as sai1;
#[doc = "SAI"]
pub type Sai2 = crate::Periph<sai4::RegisterBlock, 0x4001_5c00>;
impl core::fmt::Debug for Sai2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sai2").finish()
    }
}
#[doc = "SAI"]
pub use self::sai4 as sai2;
#[doc = "SAI"]
pub type Sai3 = crate::Periph<sai4::RegisterBlock, 0x4001_6000>;
impl core::fmt::Debug for Sai3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sai3").finish()
    }
}
#[doc = "SAI"]
pub use self::sai4 as sai3;
#[doc = "SDMMC1"]
pub type Sdmmc1 = crate::Periph<sdmmc1::RegisterBlock, 0x5200_7000>;
impl core::fmt::Debug for Sdmmc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdmmc1").finish()
    }
}
#[doc = "SDMMC1"]
pub mod sdmmc1;
#[doc = "SDMMC1"]
pub type Sdmmc2 = crate::Periph<sdmmc1::RegisterBlock, 0x4802_2400>;
impl core::fmt::Debug for Sdmmc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdmmc2").finish()
    }
}
#[doc = "SDMMC1"]
pub use self::sdmmc1 as sdmmc2;
#[doc = "VREFBUF"]
pub type Vrefbuf = crate::Periph<vrefbuf::RegisterBlock, 0x5800_3c00>;
impl core::fmt::Debug for Vrefbuf {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Vrefbuf").finish()
    }
}
#[doc = "VREFBUF"]
pub mod vrefbuf;
#[doc = "IWDG"]
pub type Iwdg1 = crate::Periph<iwdg1::RegisterBlock, 0x5800_4800>;
impl core::fmt::Debug for Iwdg1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iwdg1").finish()
    }
}
#[doc = "IWDG"]
pub mod iwdg1;
#[doc = "IWDG"]
pub type Iwdg2 = crate::Periph<iwdg1::RegisterBlock, 0x5800_4c00>;
impl core::fmt::Debug for Iwdg2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iwdg2").finish()
    }
}
#[doc = "IWDG"]
pub use self::iwdg1 as iwdg2;
#[doc = "WWDG"]
pub type Wwdg1 = crate::Periph<wwdg1::RegisterBlock, 0x5000_3000>;
impl core::fmt::Debug for Wwdg1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wwdg1").finish()
    }
}
#[doc = "WWDG"]
pub mod wwdg1;
#[doc = "WWDG"]
pub type Wwdg2 = crate::Periph<wwdg1::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for Wwdg2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wwdg2").finish()
    }
}
#[doc = "WWDG"]
pub use self::wwdg1 as wwdg2;
#[doc = "PWR"]
pub type Pwr = crate::Periph<pwr::RegisterBlock, 0x5802_4800>;
impl core::fmt::Debug for Pwr {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwr").finish()
    }
}
#[doc = "PWR"]
pub mod pwr;
#[doc = "Serial peripheral interface"]
pub type Spi1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub mod spi1;
#[doc = "Serial peripheral interface"]
pub type Spi2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for Spi2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi2").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi2;
#[doc = "Serial peripheral interface"]
pub type Spi3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for Spi3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi3").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi3;
#[doc = "Serial peripheral interface"]
pub type Spi4 = crate::Periph<spi1::RegisterBlock, 0x4001_3400>;
impl core::fmt::Debug for Spi4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi4").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi4;
#[doc = "Serial peripheral interface"]
pub type Spi5 = crate::Periph<spi1::RegisterBlock, 0x4001_5000>;
impl core::fmt::Debug for Spi5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi5").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi5;
#[doc = "Serial peripheral interface"]
pub type Spi6 = crate::Periph<spi1::RegisterBlock, 0x5800_1400>;
impl core::fmt::Debug for Spi6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi6").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi6;
#[doc = "LCD-TFT Controller"]
pub type Ltdc = crate::Periph<ltdc::RegisterBlock, 0x5000_1000>;
impl core::fmt::Debug for Ltdc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ltdc").finish()
    }
}
#[doc = "LCD-TFT Controller"]
pub mod ltdc;
#[doc = "DSIHOST"]
pub type Dsihost = crate::Periph<dsihost::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for Dsihost {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dsihost").finish()
    }
}
#[doc = "DSIHOST"]
pub mod dsihost;
#[doc = "Receiver Interface"]
pub type Spdifrx = crate::Periph<spdifrx::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for Spdifrx {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spdifrx").finish()
    }
}
#[doc = "Receiver Interface"]
pub mod spdifrx;
#[doc = "Analog to Digital Converter"]
pub type Adc3 = crate::Periph<adc3::RegisterBlock, 0x5802_6000>;
impl core::fmt::Debug for Adc3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc3").finish()
    }
}
#[doc = "Analog to Digital Converter"]
pub mod adc3;
#[doc = "Analog to Digital Converter"]
pub type Adc1 = crate::Periph<adc3::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for Adc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc1").finish()
    }
}
#[doc = "Analog to Digital Converter"]
pub use self::adc3 as adc1;
#[doc = "Analog to Digital Converter"]
pub type Adc2 = crate::Periph<adc3::RegisterBlock, 0x4002_2100>;
impl core::fmt::Debug for Adc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc2").finish()
    }
}
#[doc = "Analog to Digital Converter"]
pub use self::adc3 as adc2;
#[doc = "Analog-to-Digital Converter"]
pub type Adc3Common = crate::Periph<adc3_common::RegisterBlock, 0x5802_6300>;
impl core::fmt::Debug for Adc3Common {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc3Common").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub mod adc3_common;
#[doc = "Analog-to-Digital Converter"]
pub type Adc12Common = crate::Periph<adc3_common::RegisterBlock, 0x4002_2300>;
impl core::fmt::Debug for Adc12Common {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc12Common").finish()
    }
}
#[doc = "Analog-to-Digital Converter"]
pub use self::adc3_common as adc12_common;
#[doc = "DMAMUX"]
pub type Dmamux1 = crate::Periph<dmamux1::RegisterBlock, 0x4002_0800>;
impl core::fmt::Debug for Dmamux1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmamux1").finish()
    }
}
#[doc = "DMAMUX"]
pub mod dmamux1;
#[doc = "Cryptographic processor"]
pub type Crc = crate::Periph<crc::RegisterBlock, 0x5802_4c00>;
impl core::fmt::Debug for Crc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crc").finish()
    }
}
#[doc = "Cryptographic processor"]
pub mod crc;
#[doc = "Reset and clock control"]
pub type Rcc = crate::Periph<rcc::RegisterBlock, 0x5802_4400>;
impl core::fmt::Debug for Rcc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rcc").finish()
    }
}
#[doc = "Reset and clock control"]
pub mod rcc;
#[doc = "Low power timer"]
pub type Lptim1 = crate::Periph<lptim1::RegisterBlock, 0x4000_2400>;
impl core::fmt::Debug for Lptim1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lptim1").finish()
    }
}
#[doc = "Low power timer"]
pub mod lptim1;
#[doc = "Low power timer"]
pub type Lptim2 = crate::Periph<lptim1::RegisterBlock, 0x5800_2400>;
impl core::fmt::Debug for Lptim2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lptim2").finish()
    }
}
#[doc = "Low power timer"]
pub use self::lptim1 as lptim2;
#[doc = "Low power timer"]
pub type Lptim3 = crate::Periph<lptim3::RegisterBlock, 0x5800_2800>;
impl core::fmt::Debug for Lptim3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lptim3").finish()
    }
}
#[doc = "Low power timer"]
pub mod lptim3;
#[doc = "Low power timer"]
pub type Lptim4 = crate::Periph<lptim3::RegisterBlock, 0x5800_2c00>;
impl core::fmt::Debug for Lptim4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lptim4").finish()
    }
}
#[doc = "Low power timer"]
pub use self::lptim3 as lptim4;
#[doc = "Low power timer"]
pub type Lptim5 = crate::Periph<lptim3::RegisterBlock, 0x5800_3000>;
impl core::fmt::Debug for Lptim5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lptim5").finish()
    }
}
#[doc = "Low power timer"]
pub use self::lptim3 as lptim5;
#[doc = "LPUART1"]
pub type Lpuart1 = crate::Periph<lpuart1::RegisterBlock, 0x5800_0c00>;
impl core::fmt::Debug for Lpuart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Lpuart1").finish()
    }
}
#[doc = "LPUART1"]
pub mod lpuart1;
#[doc = "System configuration controller"]
pub type Syscfg = crate::Periph<syscfg::RegisterBlock, 0x5800_0400>;
impl core::fmt::Debug for Syscfg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Syscfg").finish()
    }
}
#[doc = "System configuration controller"]
pub mod syscfg;
#[doc = "External interrupt/event controller"]
pub type Exti = crate::Periph<exti::RegisterBlock, 0x5800_0000>;
impl core::fmt::Debug for Exti {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Exti").finish()
    }
}
#[doc = "External interrupt/event controller"]
pub mod exti;
#[doc = "DELAY_Block_SDMMC1"]
pub type DelayBlockSdmmc1 = crate::Periph<delay_block_sdmmc1::RegisterBlock, 0x5200_8000>;
impl core::fmt::Debug for DelayBlockSdmmc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DelayBlockSdmmc1").finish()
    }
}
#[doc = "DELAY_Block_SDMMC1"]
pub mod delay_block_sdmmc1;
#[doc = "DELAY_Block_SDMMC1"]
pub type DelayBlockQuadspi = crate::Periph<delay_block_sdmmc1::RegisterBlock, 0x5200_6000>;
impl core::fmt::Debug for DelayBlockQuadspi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DelayBlockQuadspi").finish()
    }
}
#[doc = "DELAY_Block_SDMMC1"]
pub use self::delay_block_sdmmc1 as delay_block_quadspi;
#[doc = "DELAY_Block_SDMMC1"]
pub type DelayBlockSdmmc2 = crate::Periph<delay_block_sdmmc1::RegisterBlock, 0x4802_2800>;
impl core::fmt::Debug for DelayBlockSdmmc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DelayBlockSdmmc2").finish()
    }
}
#[doc = "DELAY_Block_SDMMC1"]
pub use self::delay_block_sdmmc1 as delay_block_sdmmc2;
#[doc = "Flash"]
pub type Flash = crate::Periph<flash::RegisterBlock, 0x5200_2000>;
impl core::fmt::Debug for Flash {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Flash").finish()
    }
}
#[doc = "Flash"]
pub mod flash;
#[doc = "AXI interconnect registers"]
pub type Axi = crate::Periph<axi::RegisterBlock, 0x5100_0000>;
impl core::fmt::Debug for Axi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Axi").finish()
    }
}
#[doc = "AXI interconnect registers"]
pub mod axi;
#[doc = "Hash processor"]
pub type Hash = crate::Periph<hash::RegisterBlock, 0x4802_1400>;
impl core::fmt::Debug for Hash {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hash").finish()
    }
}
#[doc = "Hash processor"]
pub mod hash;
#[doc = "Cryptographic processor"]
pub type Cryp = crate::Periph<cryp::RegisterBlock, 0x4802_1000>;
impl core::fmt::Debug for Cryp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Cryp").finish()
    }
}
#[doc = "Cryptographic processor"]
pub mod cryp;
#[doc = "Digital camera interface"]
pub type Dcmi = crate::Periph<dcmi::RegisterBlock, 0x4802_0000>;
impl core::fmt::Debug for Dcmi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dcmi").finish()
    }
}
#[doc = "Digital camera interface"]
pub mod dcmi;
#[doc = "USB 1 on the go high speed"]
pub type Otg1HsGlobal = crate::Periph<otg1_hs_global::RegisterBlock, 0x4004_0000>;
impl core::fmt::Debug for Otg1HsGlobal {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Otg1HsGlobal").finish()
    }
}
#[doc = "USB 1 on the go high speed"]
pub mod otg1_hs_global;
#[doc = "USB 1 on the go high speed"]
pub type Otg2HsGlobal = crate::Periph<otg1_hs_global::RegisterBlock, 0x4008_0000>;
impl core::fmt::Debug for Otg2HsGlobal {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Otg2HsGlobal").finish()
    }
}
#[doc = "USB 1 on the go high speed"]
pub use self::otg1_hs_global as otg2_hs_global;
#[doc = "USB 1 on the go high speed"]
pub type Otg1HsHost = crate::Periph<otg1_hs_host::RegisterBlock, 0x4004_0400>;
impl core::fmt::Debug for Otg1HsHost {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Otg1HsHost").finish()
    }
}
#[doc = "USB 1 on the go high speed"]
pub mod otg1_hs_host;
#[doc = "USB 1 on the go high speed"]
pub type Otg2HsHost = crate::Periph<otg1_hs_host::RegisterBlock, 0x4008_0400>;
impl core::fmt::Debug for Otg2HsHost {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Otg2HsHost").finish()
    }
}
#[doc = "USB 1 on the go high speed"]
pub use self::otg1_hs_host as otg2_hs_host;
#[doc = "USB 1 on the go high speed"]
pub type Otg1HsDevice = crate::Periph<otg1_hs_device::RegisterBlock, 0x4004_0800>;
impl core::fmt::Debug for Otg1HsDevice {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Otg1HsDevice").finish()
    }
}
#[doc = "USB 1 on the go high speed"]
pub mod otg1_hs_device;
#[doc = "USB 1 on the go high speed"]
pub type Otg2HsDevice = crate::Periph<otg1_hs_device::RegisterBlock, 0x4008_0800>;
impl core::fmt::Debug for Otg2HsDevice {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Otg2HsDevice").finish()
    }
}
#[doc = "USB 1 on the go high speed"]
pub use self::otg1_hs_device as otg2_hs_device;
#[doc = "USB 1 on the go high speed"]
pub type Otg1HsPwrclk = crate::Periph<otg1_hs_pwrclk::RegisterBlock, 0x4004_0e00>;
impl core::fmt::Debug for Otg1HsPwrclk {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Otg1HsPwrclk").finish()
    }
}
#[doc = "USB 1 on the go high speed"]
pub mod otg1_hs_pwrclk;
#[doc = "USB 1 on the go high speed"]
pub type Otg2HsPwrclk = crate::Periph<otg1_hs_pwrclk::RegisterBlock, 0x4008_0e00>;
impl core::fmt::Debug for Otg2HsPwrclk {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Otg2HsPwrclk").finish()
    }
}
#[doc = "USB 1 on the go high speed"]
pub use self::otg1_hs_pwrclk as otg2_hs_pwrclk;
#[doc = "Ethernet: media access control (MAC)"]
pub type EthernetMac = crate::Periph<ethernet_mac::RegisterBlock, 0x4002_8000>;
impl core::fmt::Debug for EthernetMac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EthernetMac").finish()
    }
}
#[doc = "Ethernet: media access control (MAC)"]
pub mod ethernet_mac;
#[doc = "DMA controller"]
pub type Dma1 = crate::Periph<dma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for Dma1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma1").finish()
    }
}
#[doc = "DMA controller"]
pub mod dma1;
#[doc = "DMA controller"]
pub type Dma2 = crate::Periph<dma1::RegisterBlock, 0x4002_0400>;
impl core::fmt::Debug for Dma2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma2").finish()
    }
}
#[doc = "DMA controller"]
pub use self::dma1 as dma2;
#[doc = "High Resolution Timer: Master Timers"]
pub type HrtimMaster = crate::Periph<hrtim_master::RegisterBlock, 0x4001_7400>;
impl core::fmt::Debug for HrtimMaster {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HrtimMaster").finish()
    }
}
#[doc = "High Resolution Timer: Master Timers"]
pub mod hrtim_master;
#[doc = "High Resolution Timer: TIMA"]
pub type HrtimTima = crate::Periph<hrtim_tima::RegisterBlock, 0x4001_7480>;
impl core::fmt::Debug for HrtimTima {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HrtimTima").finish()
    }
}
#[doc = "High Resolution Timer: TIMA"]
pub mod hrtim_tima;
#[doc = "High Resolution Timer: TIMB"]
pub type HrtimTimb = crate::Periph<hrtim_timb::RegisterBlock, 0x4001_7500>;
impl core::fmt::Debug for HrtimTimb {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HrtimTimb").finish()
    }
}
#[doc = "High Resolution Timer: TIMB"]
pub mod hrtim_timb;
#[doc = "High Resolution Timer: TIMC"]
pub type HrtimTimc = crate::Periph<hrtim_timc::RegisterBlock, 0x4001_7580>;
impl core::fmt::Debug for HrtimTimc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HrtimTimc").finish()
    }
}
#[doc = "High Resolution Timer: TIMC"]
pub mod hrtim_timc;
#[doc = "High Resolution Timer: TIMD"]
pub type HrtimTimd = crate::Periph<hrtim_timd::RegisterBlock, 0x4001_7600>;
impl core::fmt::Debug for HrtimTimd {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HrtimTimd").finish()
    }
}
#[doc = "High Resolution Timer: TIMD"]
pub mod hrtim_timd;
#[doc = "High Resolution Timer: TIME"]
pub type HrtimTime = crate::Periph<hrtim_time::RegisterBlock, 0x4001_7680>;
impl core::fmt::Debug for HrtimTime {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HrtimTime").finish()
    }
}
#[doc = "High Resolution Timer: TIME"]
pub mod hrtim_time;
#[doc = "High Resolution Timer: Common functions"]
pub type HrtimCommon = crate::Periph<hrtim_common::RegisterBlock, 0x4001_7780>;
impl core::fmt::Debug for HrtimCommon {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HrtimCommon").finish()
    }
}
#[doc = "High Resolution Timer: Common functions"]
pub mod hrtim_common;
#[doc = "Digital filter for sigma delta modulators"]
pub type Dfsdm = crate::Periph<dfsdm::RegisterBlock, 0x4001_7000>;
impl core::fmt::Debug for Dfsdm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dfsdm").finish()
    }
}
#[doc = "Digital filter for sigma delta modulators"]
pub mod dfsdm;
#[doc = "General-purpose-timers"]
pub type Tim16 = crate::Periph<tim16::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for Tim16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim16").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod tim16;
#[doc = "General-purpose-timers"]
pub type Tim17 = crate::Periph<tim17::RegisterBlock, 0x4001_4800>;
impl core::fmt::Debug for Tim17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim17").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod tim17;
#[doc = "General purpose timers"]
pub type Tim15 = crate::Periph<tim15::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for Tim15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim15").finish()
    }
}
#[doc = "General purpose timers"]
pub mod tim15;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart1 = crate::Periph<usart1::RegisterBlock, 0x4001_1000>;
impl core::fmt::Debug for Usart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart1;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for Usart2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart2").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for Usart3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart3").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart3;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Uart4 = crate::Periph<usart1::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for Uart4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart4").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as uart4;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Uart5 = crate::Periph<usart1::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for Uart5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart5").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as uart5;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart6 = crate::Periph<usart1::RegisterBlock, 0x4001_1400>;
impl core::fmt::Debug for Usart6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart6").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart6;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Uart7 = crate::Periph<usart1::RegisterBlock, 0x4000_7800>;
impl core::fmt::Debug for Uart7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart7").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as uart7;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Uart8 = crate::Periph<usart1::RegisterBlock, 0x4000_7c00>;
impl core::fmt::Debug for Uart8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart8").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as uart8;
#[doc = "Advanced-timers"]
pub type Tim1 = crate::Periph<tim1::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for Tim1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim1").finish()
    }
}
#[doc = "Advanced-timers"]
pub mod tim1;
#[doc = "Advanced-timers"]
pub type Tim8 = crate::Periph<tim1::RegisterBlock, 0x4001_0400>;
impl core::fmt::Debug for Tim8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim8").finish()
    }
}
#[doc = "Advanced-timers"]
pub use self::tim1 as tim8;
#[doc = "FDCAN1"]
pub type Fdcan1 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a000>;
impl core::fmt::Debug for Fdcan1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fdcan1").finish()
    }
}
#[doc = "FDCAN1"]
pub mod fdcan1;
#[doc = "FDCAN1"]
pub type Fdcan2 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a400>;
impl core::fmt::Debug for Fdcan2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fdcan2").finish()
    }
}
#[doc = "FDCAN1"]
pub use self::fdcan1 as fdcan2;
#[doc = "CCU registers"]
pub type CanCcu = crate::Periph<can_ccu::RegisterBlock, 0x4000_a800>;
impl core::fmt::Debug for CanCcu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CanCcu").finish()
    }
}
#[doc = "CCU registers"]
pub mod can_ccu;
#[doc = "Management data input/output slave"]
pub type Mdios = crate::Periph<mdios::RegisterBlock, 0x4000_9400>;
impl core::fmt::Debug for Mdios {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Mdios").finish()
    }
}
#[doc = "Management data input/output slave"]
pub mod mdios;
#[doc = "Operational amplifiers"]
pub type Opamp = crate::Periph<opamp::RegisterBlock, 0x4000_9000>;
impl core::fmt::Debug for Opamp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Opamp").finish()
    }
}
#[doc = "Operational amplifiers"]
pub mod opamp;
#[doc = "Single Wire Protocol Master Interface"]
pub type Swpmi = crate::Periph<swpmi::RegisterBlock, 0x4000_8800>;
impl core::fmt::Debug for Swpmi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Swpmi").finish()
    }
}
#[doc = "Single Wire Protocol Master Interface"]
pub mod swpmi;
#[doc = "General purpose timers"]
pub type Tim2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Tim2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim2").finish()
    }
}
#[doc = "General purpose timers"]
pub mod tim2;
#[doc = "General purpose timers"]
pub type Tim3 = crate::Periph<tim2::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for Tim3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim3").finish()
    }
}
#[doc = "General purpose timers"]
pub use self::tim2 as tim3;
#[doc = "General purpose timers"]
pub type Tim4 = crate::Periph<tim2::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for Tim4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim4").finish()
    }
}
#[doc = "General purpose timers"]
pub use self::tim2 as tim4;
#[doc = "General purpose timers"]
pub type Tim5 = crate::Periph<tim2::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for Tim5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim5").finish()
    }
}
#[doc = "General purpose timers"]
pub use self::tim2 as tim5;
#[doc = "General purpose timers"]
pub type Tim12 = crate::Periph<tim2::RegisterBlock, 0x4000_1800>;
impl core::fmt::Debug for Tim12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim12").finish()
    }
}
#[doc = "General purpose timers"]
pub use self::tim2 as tim12;
#[doc = "General purpose timers"]
pub type Tim13 = crate::Periph<tim2::RegisterBlock, 0x4000_1c00>;
impl core::fmt::Debug for Tim13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim13").finish()
    }
}
#[doc = "General purpose timers"]
pub use self::tim2 as tim13;
#[doc = "General purpose timers"]
pub type Tim14 = crate::Periph<tim2::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for Tim14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim14").finish()
    }
}
#[doc = "General purpose timers"]
pub use self::tim2 as tim14;
#[doc = "Basic timers"]
pub type Tim6 = crate::Periph<tim6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for Tim6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim6").finish()
    }
}
#[doc = "Basic timers"]
pub mod tim6;
#[doc = "Basic timers"]
pub type Tim7 = crate::Periph<tim6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for Tim7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tim7").finish()
    }
}
#[doc = "Basic timers"]
pub use self::tim6 as tim7;
#[doc = "Microcontroller Debug Unit"]
pub type Dbgmcu = crate::Periph<dbgmcu::RegisterBlock, 0x5c00_1000>;
impl core::fmt::Debug for Dbgmcu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dbgmcu").finish()
    }
}
#[doc = "Microcontroller Debug Unit"]
pub mod dbgmcu;
#[doc = "ECC controller is associated to each RAM area"]
pub type Ramecc1 = crate::Periph<ramecc1::RegisterBlock, 0x5200_9000>;
impl core::fmt::Debug for Ramecc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ramecc1").finish()
    }
}
#[doc = "ECC controller is associated to each RAM area"]
pub mod ramecc1;
#[doc = "ECC controller is associated to each RAM area"]
pub type Ramecc2 = crate::Periph<ramecc2::RegisterBlock, 0x4802_3000>;
impl core::fmt::Debug for Ramecc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ramecc2").finish()
    }
}
#[doc = "ECC controller is associated to each RAM area"]
pub mod ramecc2;
#[doc = "ECC controller is associated to each RAM area"]
pub type Ramecc3 = crate::Periph<ramecc3::RegisterBlock, 0x5802_7000>;
impl core::fmt::Debug for Ramecc3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ramecc3").finish()
    }
}
#[doc = "ECC controller is associated to each RAM area"]
pub mod ramecc3;
#[doc = "accelerator - control register (ART_CTR)"]
pub type Art = crate::Periph<art::RegisterBlock, 0x4002_4400>;
impl core::fmt::Debug for Art {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Art").finish()
    }
}
#[doc = "accelerator - control register (ART_CTR)"]
pub mod art;
#[unsafe(no_mangle)]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "COMP1"]
    pub comp1: Comp1,
    #[doc = "CRS"]
    pub crs: Crs,
    #[doc = "DAC"]
    pub dac: Dac,
    #[doc = "BDMA"]
    pub bdma: Bdma,
    #[doc = "DMA2D"]
    pub dma2d: Dma2d,
    #[doc = "DMAMUX2"]
    pub dmamux2: Dmamux2,
    #[doc = "FMC"]
    pub fmc: Fmc,
    #[doc = "CEC"]
    pub cec: Cec,
    #[doc = "HSEM"]
    pub hsem: Hsem,
    #[doc = "I2C1"]
    pub i2c1: I2c1,
    #[doc = "I2C2"]
    pub i2c2: I2c2,
    #[doc = "I2C3"]
    pub i2c3: I2c3,
    #[doc = "I2C4"]
    pub i2c4: I2c4,
    #[doc = "GPIOA"]
    pub gpioa: Gpioa,
    #[doc = "GPIOB"]
    pub gpiob: Gpiob,
    #[doc = "GPIOC"]
    pub gpioc: Gpioc,
    #[doc = "GPIOD"]
    pub gpiod: Gpiod,
    #[doc = "GPIOE"]
    pub gpioe: Gpioe,
    #[doc = "GPIOF"]
    pub gpiof: Gpiof,
    #[doc = "GPIOG"]
    pub gpiog: Gpiog,
    #[doc = "GPIOH"]
    pub gpioh: Gpioh,
    #[doc = "GPIOI"]
    pub gpioi: Gpioi,
    #[doc = "GPIOJ"]
    pub gpioj: Gpioj,
    #[doc = "GPIOK"]
    pub gpiok: Gpiok,
    #[doc = "JPEG"]
    pub jpeg: Jpeg,
    #[doc = "MDMA"]
    pub mdma: Mdma,
    #[doc = "QUADSPI"]
    pub quadspi: Quadspi,
    #[doc = "RNG"]
    pub rng: Rng,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "SAI4"]
    pub sai4: Sai4,
    #[doc = "SAI1"]
    pub sai1: Sai1,
    #[doc = "SAI2"]
    pub sai2: Sai2,
    #[doc = "SAI3"]
    pub sai3: Sai3,
    #[doc = "SDMMC1"]
    pub sdmmc1: Sdmmc1,
    #[doc = "SDMMC2"]
    pub sdmmc2: Sdmmc2,
    #[doc = "VREFBUF"]
    pub vrefbuf: Vrefbuf,
    #[doc = "IWDG1"]
    pub iwdg1: Iwdg1,
    #[doc = "IWDG2"]
    pub iwdg2: Iwdg2,
    #[doc = "WWDG1"]
    pub wwdg1: Wwdg1,
    #[doc = "WWDG2"]
    pub wwdg2: Wwdg2,
    #[doc = "PWR"]
    pub pwr: Pwr,
    #[doc = "SPI1"]
    pub spi1: Spi1,
    #[doc = "SPI2"]
    pub spi2: Spi2,
    #[doc = "SPI3"]
    pub spi3: Spi3,
    #[doc = "SPI4"]
    pub spi4: Spi4,
    #[doc = "SPI5"]
    pub spi5: Spi5,
    #[doc = "SPI6"]
    pub spi6: Spi6,
    #[doc = "LTDC"]
    pub ltdc: Ltdc,
    #[doc = "DSIHOST"]
    pub dsihost: Dsihost,
    #[doc = "SPDIFRX"]
    pub spdifrx: Spdifrx,
    #[doc = "ADC3"]
    pub adc3: Adc3,
    #[doc = "ADC1"]
    pub adc1: Adc1,
    #[doc = "ADC2"]
    pub adc2: Adc2,
    #[doc = "ADC3_Common"]
    pub adc3_common: Adc3Common,
    #[doc = "ADC12_Common"]
    pub adc12_common: Adc12Common,
    #[doc = "DMAMUX1"]
    pub dmamux1: Dmamux1,
    #[doc = "CRC"]
    pub crc: Crc,
    #[doc = "RCC"]
    pub rcc: Rcc,
    #[doc = "LPTIM1"]
    pub lptim1: Lptim1,
    #[doc = "LPTIM2"]
    pub lptim2: Lptim2,
    #[doc = "LPTIM3"]
    pub lptim3: Lptim3,
    #[doc = "LPTIM4"]
    pub lptim4: Lptim4,
    #[doc = "LPTIM5"]
    pub lptim5: Lptim5,
    #[doc = "LPUART1"]
    pub lpuart1: Lpuart1,
    #[doc = "SYSCFG"]
    pub syscfg: Syscfg,
    #[doc = "EXTI"]
    pub exti: Exti,
    #[doc = "DELAY_Block_SDMMC1"]
    pub delay_block_sdmmc1: DelayBlockSdmmc1,
    #[doc = "DELAY_Block_QUADSPI"]
    pub delay_block_quadspi: DelayBlockQuadspi,
    #[doc = "DELAY_Block_SDMMC2"]
    pub delay_block_sdmmc2: DelayBlockSdmmc2,
    #[doc = "Flash"]
    pub flash: Flash,
    #[doc = "AXI"]
    pub axi: Axi,
    #[doc = "HASH"]
    pub hash: Hash,
    #[doc = "CRYP"]
    pub cryp: Cryp,
    #[doc = "DCMI"]
    pub dcmi: Dcmi,
    #[doc = "OTG1_HS_GLOBAL"]
    pub otg1_hs_global: Otg1HsGlobal,
    #[doc = "OTG2_HS_GLOBAL"]
    pub otg2_hs_global: Otg2HsGlobal,
    #[doc = "OTG1_HS_HOST"]
    pub otg1_hs_host: Otg1HsHost,
    #[doc = "OTG2_HS_HOST"]
    pub otg2_hs_host: Otg2HsHost,
    #[doc = "OTG1_HS_DEVICE"]
    pub otg1_hs_device: Otg1HsDevice,
    #[doc = "OTG2_HS_DEVICE"]
    pub otg2_hs_device: Otg2HsDevice,
    #[doc = "OTG1_HS_PWRCLK"]
    pub otg1_hs_pwrclk: Otg1HsPwrclk,
    #[doc = "OTG2_HS_PWRCLK"]
    pub otg2_hs_pwrclk: Otg2HsPwrclk,
    #[doc = "Ethernet_MAC"]
    pub ethernet_mac: EthernetMac,
    #[doc = "DMA1"]
    pub dma1: Dma1,
    #[doc = "DMA2"]
    pub dma2: Dma2,
    #[doc = "HRTIM_Master"]
    pub hrtim_master: HrtimMaster,
    #[doc = "HRTIM_TIMA"]
    pub hrtim_tima: HrtimTima,
    #[doc = "HRTIM_TIMB"]
    pub hrtim_timb: HrtimTimb,
    #[doc = "HRTIM_TIMC"]
    pub hrtim_timc: HrtimTimc,
    #[doc = "HRTIM_TIMD"]
    pub hrtim_timd: HrtimTimd,
    #[doc = "HRTIM_TIME"]
    pub hrtim_time: HrtimTime,
    #[doc = "HRTIM_Common"]
    pub hrtim_common: HrtimCommon,
    #[doc = "DFSDM"]
    pub dfsdm: Dfsdm,
    #[doc = "TIM16"]
    pub tim16: Tim16,
    #[doc = "TIM17"]
    pub tim17: Tim17,
    #[doc = "TIM15"]
    pub tim15: Tim15,
    #[doc = "USART1"]
    pub usart1: Usart1,
    #[doc = "USART2"]
    pub usart2: Usart2,
    #[doc = "USART3"]
    pub usart3: Usart3,
    #[doc = "UART4"]
    pub uart4: Uart4,
    #[doc = "UART5"]
    pub uart5: Uart5,
    #[doc = "USART6"]
    pub usart6: Usart6,
    #[doc = "UART7"]
    pub uart7: Uart7,
    #[doc = "UART8"]
    pub uart8: Uart8,
    #[doc = "TIM1"]
    pub tim1: Tim1,
    #[doc = "TIM8"]
    pub tim8: Tim8,
    #[doc = "FDCAN1"]
    pub fdcan1: Fdcan1,
    #[doc = "FDCAN2"]
    pub fdcan2: Fdcan2,
    #[doc = "CAN_CCU"]
    pub can_ccu: CanCcu,
    #[doc = "MDIOS"]
    pub mdios: Mdios,
    #[doc = "OPAMP"]
    pub opamp: Opamp,
    #[doc = "SWPMI"]
    pub swpmi: Swpmi,
    #[doc = "TIM2"]
    pub tim2: Tim2,
    #[doc = "TIM3"]
    pub tim3: Tim3,
    #[doc = "TIM4"]
    pub tim4: Tim4,
    #[doc = "TIM5"]
    pub tim5: Tim5,
    #[doc = "TIM12"]
    pub tim12: Tim12,
    #[doc = "TIM13"]
    pub tim13: Tim13,
    #[doc = "TIM14"]
    pub tim14: Tim14,
    #[doc = "TIM6"]
    pub tim6: Tim6,
    #[doc = "TIM7"]
    pub tim7: Tim7,
    #[doc = "DBGMCU"]
    pub dbgmcu: Dbgmcu,
    #[doc = "RAMECC1"]
    pub ramecc1: Ramecc1,
    #[doc = "RAMECC2"]
    pub ramecc2: Ramecc2,
    #[doc = "RAMECC3"]
    pub ramecc3: Ramecc3,
    #[doc = "ART"]
    pub art: Art,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            comp1: Comp1::steal(),
            crs: Crs::steal(),
            dac: Dac::steal(),
            bdma: Bdma::steal(),
            dma2d: Dma2d::steal(),
            dmamux2: Dmamux2::steal(),
            fmc: Fmc::steal(),
            cec: Cec::steal(),
            hsem: Hsem::steal(),
            i2c1: I2c1::steal(),
            i2c2: I2c2::steal(),
            i2c3: I2c3::steal(),
            i2c4: I2c4::steal(),
            gpioa: Gpioa::steal(),
            gpiob: Gpiob::steal(),
            gpioc: Gpioc::steal(),
            gpiod: Gpiod::steal(),
            gpioe: Gpioe::steal(),
            gpiof: Gpiof::steal(),
            gpiog: Gpiog::steal(),
            gpioh: Gpioh::steal(),
            gpioi: Gpioi::steal(),
            gpioj: Gpioj::steal(),
            gpiok: Gpiok::steal(),
            jpeg: Jpeg::steal(),
            mdma: Mdma::steal(),
            quadspi: Quadspi::steal(),
            rng: Rng::steal(),
            rtc: Rtc::steal(),
            sai4: Sai4::steal(),
            sai1: Sai1::steal(),
            sai2: Sai2::steal(),
            sai3: Sai3::steal(),
            sdmmc1: Sdmmc1::steal(),
            sdmmc2: Sdmmc2::steal(),
            vrefbuf: Vrefbuf::steal(),
            iwdg1: Iwdg1::steal(),
            iwdg2: Iwdg2::steal(),
            wwdg1: Wwdg1::steal(),
            wwdg2: Wwdg2::steal(),
            pwr: Pwr::steal(),
            spi1: Spi1::steal(),
            spi2: Spi2::steal(),
            spi3: Spi3::steal(),
            spi4: Spi4::steal(),
            spi5: Spi5::steal(),
            spi6: Spi6::steal(),
            ltdc: Ltdc::steal(),
            dsihost: Dsihost::steal(),
            spdifrx: Spdifrx::steal(),
            adc3: Adc3::steal(),
            adc1: Adc1::steal(),
            adc2: Adc2::steal(),
            adc3_common: Adc3Common::steal(),
            adc12_common: Adc12Common::steal(),
            dmamux1: Dmamux1::steal(),
            crc: Crc::steal(),
            rcc: Rcc::steal(),
            lptim1: Lptim1::steal(),
            lptim2: Lptim2::steal(),
            lptim3: Lptim3::steal(),
            lptim4: Lptim4::steal(),
            lptim5: Lptim5::steal(),
            lpuart1: Lpuart1::steal(),
            syscfg: Syscfg::steal(),
            exti: Exti::steal(),
            delay_block_sdmmc1: DelayBlockSdmmc1::steal(),
            delay_block_quadspi: DelayBlockQuadspi::steal(),
            delay_block_sdmmc2: DelayBlockSdmmc2::steal(),
            flash: Flash::steal(),
            axi: Axi::steal(),
            hash: Hash::steal(),
            cryp: Cryp::steal(),
            dcmi: Dcmi::steal(),
            otg1_hs_global: Otg1HsGlobal::steal(),
            otg2_hs_global: Otg2HsGlobal::steal(),
            otg1_hs_host: Otg1HsHost::steal(),
            otg2_hs_host: Otg2HsHost::steal(),
            otg1_hs_device: Otg1HsDevice::steal(),
            otg2_hs_device: Otg2HsDevice::steal(),
            otg1_hs_pwrclk: Otg1HsPwrclk::steal(),
            otg2_hs_pwrclk: Otg2HsPwrclk::steal(),
            ethernet_mac: EthernetMac::steal(),
            dma1: Dma1::steal(),
            dma2: Dma2::steal(),
            hrtim_master: HrtimMaster::steal(),
            hrtim_tima: HrtimTima::steal(),
            hrtim_timb: HrtimTimb::steal(),
            hrtim_timc: HrtimTimc::steal(),
            hrtim_timd: HrtimTimd::steal(),
            hrtim_time: HrtimTime::steal(),
            hrtim_common: HrtimCommon::steal(),
            dfsdm: Dfsdm::steal(),
            tim16: Tim16::steal(),
            tim17: Tim17::steal(),
            tim15: Tim15::steal(),
            usart1: Usart1::steal(),
            usart2: Usart2::steal(),
            usart3: Usart3::steal(),
            uart4: Uart4::steal(),
            uart5: Uart5::steal(),
            usart6: Usart6::steal(),
            uart7: Uart7::steal(),
            uart8: Uart8::steal(),
            tim1: Tim1::steal(),
            tim8: Tim8::steal(),
            fdcan1: Fdcan1::steal(),
            fdcan2: Fdcan2::steal(),
            can_ccu: CanCcu::steal(),
            mdios: Mdios::steal(),
            opamp: Opamp::steal(),
            swpmi: Swpmi::steal(),
            tim2: Tim2::steal(),
            tim3: Tim3::steal(),
            tim4: Tim4::steal(),
            tim5: Tim5::steal(),
            tim12: Tim12::steal(),
            tim13: Tim13::steal(),
            tim14: Tim14::steal(),
            tim6: Tim6::steal(),
            tim7: Tim7::steal(),
            dbgmcu: Dbgmcu::steal(),
            ramecc1: Ramecc1::steal(),
            ramecc2: Ramecc2::steal(),
            ramecc3: Ramecc3::steal(),
            art: Art::steal(),
        }
    }
}
